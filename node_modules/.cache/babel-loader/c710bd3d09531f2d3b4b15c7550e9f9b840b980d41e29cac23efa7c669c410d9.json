{"ast":null,"code":"var _jsxFileName = \"/Users/absatnurlybk./whatsapp-chat/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  idInstance,\n  apiTokenInstance,\n  phone\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [instanceStatus, setInstanceStatus] = useState(\"\");\n  useEffect(() => {\n    const configureInstance = async () => {\n      try {\n        await axios.post(`https://7103.api.greenapi.com/waInstance${idInstance}/SetSettings/${apiTokenInstance}`, {\n          webhookUrl: \"\",\n          outgoingWebhook: \"yes\",\n          stateWebhook: \"yes\",\n          incomingWebhook: \"yes\"\n        });\n        const statusResponse = await axios.get(`https://7103.api.greenapi.com/waInstance${idInstance}/GetStateInstance/${apiTokenInstance}`);\n        setInstanceStatus(statusResponse.data.stateInstance);\n      } catch (error) {\n        console.error(\"Ошибка настройки:\", error);\n      }\n    };\n    const clearNotificationQueue = async () => {\n      try {\n        let response;\n        do {\n          response = await axios.get(`https://7103.api.greenapi.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`);\n          if (response.data) {\n            await axios.delete(`https://7103.api.greenapi.com/waInstance${idInstance}/DeleteNotification/${apiTokenInstance}/${response.data.receiptId}`);\n          }\n        } while (response.data);\n      } catch (error) {\n        console.log(\"Очередь очищена\");\n      }\n    };\n    if (idInstance && apiTokenInstance) {\n      configureInstance();\n      clearNotificationQueue();\n    }\n  }, [idInstance, apiTokenInstance]);\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    try {\n      const response = await axios.post(`https://7103.api.greenapi.com/waInstance${idInstance}/SendMessage/${apiTokenInstance}`, {\n        chatId: `${phone}@c.us`,\n        message: newMessage\n      });\n      setMessages(prev => [...prev, {\n        id: response.data.idMessage,\n        text: newMessage,\n        isOutgoing: true,\n        status: \"sent\"\n      }]);\n      checkDeliveryStatus(response.data.idMessage);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.error(\"Ошибка отправки:\", error);\n    }\n  };\n  const checkDeliveryStatus = async messageId => {\n    try {\n      const response = await axios.get(`https://7103.api.greenapi.com/waInstance${idInstance}/GetMessage/${apiTokenInstance}/${messageId}`);\n      console.log(\"Статус доставки:\", response.data);\n    } catch (error) {\n      console.error(\"Ошибка проверки статуса:\", error);\n    }\n  };\n  const fetchMessages = async () => {\n    console.log(\"Начало проверки сообщений:\", new Date().toISOString());\n    try {\n      const response = await axios.get(`https://7103.api.greenapi.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`, {\n        params: {\n          receiveTimeout: 20\n        }\n      });\n      console.log(\"Ответ API:\", response.data);\n      if (response.data) {\n        const {\n          receiptId,\n          body\n        } = response.data;\n        await axios.delete(`https://7103.api.greenapi.com/waInstance${idInstance}/DeleteNotification/${apiTokenInstance}/${receiptId}`);\n        if (body.typeWebhook === \"incomingMessageReceived\") {\n          const messageData = body.messageData;\n          let messageContent = \"\";\n          switch (messageData.typeMessage) {\n            case \"textMessage\":\n              messageContent = messageData.textMessageData.textMessage;\n              break;\n            case \"extendedTextMessage\":\n            case \"quotedMessage\":\n              messageContent = messageData.extendedTextMessageData.text;\n              break;\n            default:\n              messageContent = \"Неподдерживаемый тип сообщения\";\n          }\n          console.log(\"Получено уведомление от:\", body.senderData.sender);\n          setMessages(prev => [...prev, {\n            id: body.idMessage,\n            text: messageContent,\n            isOutgoing: false,\n            sender: body.senderData.sender\n          }]);\n        }\n      }\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) !== 404) {\n        console.error(\"Ошибка получения:\", error);\n      }\n    }\n    console.log(\"Конец проверки сообщений:\", new Date().toISOString());\n  };\n  useEffect(() => {\n    let isMounted = true;\n    const checkMessages = async () => {\n      if (!isMounted) return;\n      await fetchMessages();\n      setTimeout(checkMessages, 3000);\n    };\n    checkMessages();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-bar\",\n      children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441 \\u0438\\u043D\\u0441\\u0442\\u0430\\u043D\\u0441\\u0430: \", instanceStatus || \"Проверка...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-area\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        isOutgoing: msg.isOutgoing,\n        status: msg.status\n      }, `${msg.id}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435...\",\n        onKeyPress: e => e.key === \"Enter\" && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !newMessage.trim(),\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"ShAPtOuUlvstk2qNI8EY8VLNKpA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","Message","jsxDEV","_jsxDEV","Chat","idInstance","apiTokenInstance","phone","_s","messages","setMessages","newMessage","setNewMessage","instanceStatus","setInstanceStatus","configureInstance","post","webhookUrl","outgoingWebhook","stateWebhook","incomingWebhook","statusResponse","get","data","stateInstance","error","console","clearNotificationQueue","response","delete","receiptId","log","handleSendMessage","trim","chatId","message","prev","id","idMessage","text","isOutgoing","status","checkDeliveryStatus","messageId","fetchMessages","Date","toISOString","params","receiveTimeout","body","typeWebhook","messageData","messageContent","typeMessage","textMessageData","textMessage","extendedTextMessageData","senderData","sender","_error$response","isMounted","checkMessages","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onKeyPress","key","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/absatnurlybk./whatsapp-chat/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Message from \"./Message\";\n\nconst Chat = ({ idInstance, apiTokenInstance, phone }) => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [instanceStatus, setInstanceStatus] = useState(\"\");\n\n  useEffect(() => {\n    const configureInstance = async () => {\n      try {\n        await axios.post(\n          `https://7103.api.greenapi.com/waInstance${idInstance}/SetSettings/${apiTokenInstance}`,\n          {\n            webhookUrl: \"\",\n            outgoingWebhook: \"yes\",\n            stateWebhook: \"yes\",\n            incomingWebhook: \"yes\",\n          }\n        );\n\n        const statusResponse = await axios.get(\n          `https://7103.api.greenapi.com/waInstance${idInstance}/GetStateInstance/${apiTokenInstance}`\n        );\n        setInstanceStatus(statusResponse.data.stateInstance);\n      } catch (error) {\n        console.error(\"Ошибка настройки:\", error);\n      }\n    };\n\n    const clearNotificationQueue = async () => {\n      try {\n        let response;\n        do {\n          response = await axios.get(\n            `https://7103.api.greenapi.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`\n          );\n          if (response.data) {\n            await axios.delete(\n              `https://7103.api.greenapi.com/waInstance${idInstance}/DeleteNotification/${apiTokenInstance}/${response.data.receiptId}`\n            );\n          }\n        } while (response.data);\n      } catch (error) {\n        console.log(\"Очередь очищена\");\n      }\n    };\n\n    if (idInstance && apiTokenInstance) {\n      configureInstance();\n      clearNotificationQueue();\n    }\n  }, [idInstance, apiTokenInstance]);\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n\n    try {\n      const response = await axios.post(\n        `https://7103.api.greenapi.com/waInstance${idInstance}/SendMessage/${apiTokenInstance}`,\n        {\n          chatId: `${phone}@c.us`,\n          message: newMessage,\n        }\n      );\n\n      setMessages((prev) => [\n        ...prev,\n        {\n          id: response.data.idMessage,\n          text: newMessage,\n          isOutgoing: true,\n          status: \"sent\",\n        },\n      ]);\n\n      checkDeliveryStatus(response.data.idMessage);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.error(\"Ошибка отправки:\", error);\n    }\n  };\n\n  const checkDeliveryStatus = async (messageId) => {\n    try {\n      const response = await axios.get(\n        `https://7103.api.greenapi.com/waInstance${idInstance}/GetMessage/${apiTokenInstance}/${messageId}`\n      );\n      console.log(\"Статус доставки:\", response.data);\n    } catch (error) {\n      console.error(\"Ошибка проверки статуса:\", error);\n    }\n  };\n\n  const fetchMessages = async () => {\n    console.log(\"Начало проверки сообщений:\", new Date().toISOString());\n    try {\n      const response = await axios.get(\n        `https://7103.api.greenapi.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`,\n        { params: { receiveTimeout: 20 } }\n      );\n\n      console.log(\"Ответ API:\", response.data);\n\n      if (response.data) {\n        const { receiptId, body } = response.data;\n\n        await axios.delete(\n          `https://7103.api.greenapi.com/waInstance${idInstance}/DeleteNotification/${apiTokenInstance}/${receiptId}`\n        );\n\n        if (body.typeWebhook === \"incomingMessageReceived\") {\n          const messageData = body.messageData;\n          let messageContent = \"\";\n\n          switch (messageData.typeMessage) {\n            case \"textMessage\":\n              messageContent = messageData.textMessageData.textMessage;\n              break;\n            case \"extendedTextMessage\":\n            case \"quotedMessage\":\n              messageContent = messageData.extendedTextMessageData.text;\n              break;\n            default:\n              messageContent = \"Неподдерживаемый тип сообщения\";\n          }\n\n          console.log(\"Получено уведомление от:\", body.senderData.sender);\n          setMessages((prev) => [\n            ...prev,\n            {\n              id: body.idMessage,\n              text: messageContent,\n              isOutgoing: false,\n              sender: body.senderData.sender,\n            },\n          ]);\n        }\n      }\n    } catch (error) {\n      if (error.response?.status !== 404) {\n        console.error(\"Ошибка получения:\", error);\n      }\n    }\n    console.log(\"Конец проверки сообщений:\", new Date().toISOString());\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const checkMessages = async () => {\n      if (!isMounted) return;\n      await fetchMessages();\n      setTimeout(checkMessages, 3000);\n    };\n\n    checkMessages();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"status-bar\">\n        Статус инстанса: {instanceStatus || \"Проверка...\"}\n      </div>\n\n      <div className=\"messages-area\">\n        {messages.map((msg, index) => (\n          <Message\n            key={`${msg.id}-${index}`}\n            text={msg.text}\n            isOutgoing={msg.isOutgoing}\n            status={msg.status}\n          />\n        ))}\n      </div>\n\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Введите сообщение...\"\n          onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage} disabled={!newMessage.trim()}>\n          Отправить\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}